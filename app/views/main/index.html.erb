<div class="container">
  <h1>로또 번호 패턴 분석 추천</h1>
  <pre style="text-align: left; font-size: 15px; font-weight: bold">

    기존 로또 당첨 번호의 패턴을 분석하여
    자주 등장하는 번호나 특정 규칙을 기반으로 번호를 생성하는 기능을 추가하려면,
    패턴 분석을 위한 데이터가 필요합니다.

    이 데이터는 과거 로또 당첨 번호를 분석하여 패턴을 도출한 뒤
     이를 바탕으로 번호를 추천하는 방식으로 구현할 수 있습니다.

    1. 번호 패턴 분석
    - 1회부터 자주 등장하는 번호: 5, 9, 12, 23, 32, 41, 7, 15, 22, 34, 38, 45
    - 연속된 번호: 2~3개의 번호가 연속으로 등장한 패턴.
    - 번호 구간별 빈도: 1~10, 11~20, 21~30 등의 구간에서 자주 등장하는 번호.

    이런 패턴을 분석하여 이를 바탕으로 번호를 추천하는 코드를 만들 수 있습니다.

  </pre>
  <div id="lottoNumbers"></div>
  <br>
  <button onclick="generatePatternBasedNumbers()">새 번호 생성</button>
</div>

<script>
	// 자주 등장한 로또 번호 예시 (실제 데이터로 교체 가능)
	const frequentNumbers = [5, 9, 12, 23, 32, 41, 7, 15, 22, 34, 38, 45];

	// 번호 구간별 빈도수 분석 예시 (1-10, 11-20, 21-30, 31-40, 41-45)
	const numberRanges = {
		'1-10': [1, 3, 7, 9],
		'11-20': [12, 15, 19],
		'21-30': [23, 25, 27],
		'31-40': [32, 34, 38],
		'41-45': [41, 43, 45]
	};

	// 연속된 번호 패턴 분석 예시
	const consecutivePatterns = [
		[9, 10, 11], // 연속된 번호가 등장한 패턴
		[23, 24, 25]
	];

	// 랜덤 번호 선택
	function getRandomElement(arr) {
		return arr[Math.floor(Math.random() * arr.length)];
	}

	// 패턴 기반으로 로또 번호 생성
	function generatePatternBasedNumbers() {
		const numbersContainer = document.getElementById('lottoNumbers');
		numbersContainer.innerHTML = ''; // 이전 번호 초기화

		const selectedNumbers = [];

		// 자주 등장한 번호에서 3개 선택
		while (selectedNumbers.length < 3) {
			const randomNumber = getRandomElement(frequentNumbers);
			if (!selectedNumbers.includes(randomNumber)) {
				selectedNumbers.push(randomNumber);
			}
		}

		// 번호 구간별로 2개 선택
		const rangeKeys = Object.keys(numberRanges);
		while (selectedNumbers.length < 5) {
			const randomRange = getRandomElement(rangeKeys);
			const randomNumber = getRandomElement(numberRanges[randomRange]);
			if (!selectedNumbers.includes(randomNumber)) {
				selectedNumbers.push(randomNumber);
			}
		}

		// 연속된 번호 패턴 중 1개 추가
		const consecutivePattern = getRandomElement(consecutivePatterns);
		const randomNumber = getRandomElement(consecutivePattern);
		if (!selectedNumbers.includes(randomNumber)) {
			selectedNumbers.push(randomNumber);
		}

		// 번호가 6개로 맞춰질 때까지 반복
		while (selectedNumbers.length < 6) {
			const randomNumber = Math.floor(Math.random() * 45) + 1;
			if (!selectedNumbers.includes(randomNumber)) {
				selectedNumbers.push(randomNumber);
			}
		}

		// 번호 표시
		selectedNumbers.forEach(number => {
			const numberElement = document.createElement('div');
			numberElement.className = 'number';
			numberElement.textContent = number;
			numbersContainer.appendChild(numberElement);
		});
	}

	// 페이지 로드 시 초기 번호 생성
	window.onload = generatePatternBasedNumbers;
</script>